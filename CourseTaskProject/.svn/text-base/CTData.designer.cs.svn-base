#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CourseTaskProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class CTData : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssessments(Assessments instance);
    partial void UpdateAssessments(Assessments instance);
    partial void DeleteAssessments(Assessments instance);
    partial void InsertCourses(Courses instance);
    partial void UpdateCourses(Courses instance);
    partial void DeleteCourses(Courses instance);
    partial void InsertRegisters(Registers instance);
    partial void UpdateRegisters(Registers instance);
    partial void DeleteRegisters(Registers instance);
    partial void InsertScores(Scores instance);
    partial void UpdateScores(Scores instance);
    partial void DeleteScores(Scores instance);
    partial void InsertStudentGroup(StudentGroup instance);
    partial void UpdateStudentGroup(StudentGroup instance);
    partial void DeleteStudentGroup(StudentGroup instance);
    partial void InsertStudents(Students instance);
    partial void UpdateStudents(Students instance);
    partial void DeleteStudents(Students instance);
    #endregion
		
		public CTData(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CTData(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CTData(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CTData(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Assessments> Assessments
		{
			get
			{
				return this.GetTable<Assessments>();
			}
		}
		
		public System.Data.Linq.Table<Courses> Courses
		{
			get
			{
				return this.GetTable<Courses>();
			}
		}
		
		public System.Data.Linq.Table<Registers> Registers
		{
			get
			{
				return this.GetTable<Registers>();
			}
		}
		
		public System.Data.Linq.Table<Scores> Scores
		{
			get
			{
				return this.GetTable<Scores>();
			}
		}
		
		public System.Data.Linq.Table<StudentGroup> StudentGroup
		{
			get
			{
				return this.GetTable<StudentGroup>();
			}
		}
		
		public System.Data.Linq.Table<Students> Students
		{
			get
			{
				return this.GetTable<Students>();
			}
		}
	}
	
	[Table()]
	public partial class Assessments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AssessID;
		
		private int _CourseID;
		
		private string _AssessTitle;
		
		private string _AssessDesc;
		
		private float _AssessMaxScore;
		
		private EntitySet<Scores> _Scores;
		
		private EntityRef<Courses> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssessIDChanging(int value);
    partial void OnAssessIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnAssessTitleChanging(string value);
    partial void OnAssessTitleChanged();
    partial void OnAssessDescChanging(string value);
    partial void OnAssessDescChanged();
    partial void OnAssessMaxScoreChanging(float value);
    partial void OnAssessMaxScoreChanged();
    #endregion
		
		public Assessments()
		{
			this._Scores = new EntitySet<Scores>(new Action<Scores>(this.attach_Scores), new Action<Scores>(this.detach_Scores));
			this._Courses = default(EntityRef<Courses>);
			OnCreated();
		}
		
		[Column(Storage="_AssessID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AssessID
		{
			get
			{
				return this._AssessID;
			}
			set
			{
				if ((this._AssessID != value))
				{
					this.OnAssessIDChanging(value);
					this.SendPropertyChanging();
					this._AssessID = value;
					this.SendPropertyChanged("AssessID");
					this.OnAssessIDChanged();
				}
			}
		}
		
		[Column(Storage="_CourseID", DbType="Int NOT NULL")]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Courses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssessTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string AssessTitle
		{
			get
			{
				return this._AssessTitle;
			}
			set
			{
				if ((this._AssessTitle != value))
				{
					this.OnAssessTitleChanging(value);
					this.SendPropertyChanging();
					this._AssessTitle = value;
					this.SendPropertyChanged("AssessTitle");
					this.OnAssessTitleChanged();
				}
			}
		}
		
		[Column(Storage="_AssessDesc", DbType="NVarChar(500)")]
		public string AssessDesc
		{
			get
			{
				return this._AssessDesc;
			}
			set
			{
				if ((this._AssessDesc != value))
				{
					this.OnAssessDescChanging(value);
					this.SendPropertyChanging();
					this._AssessDesc = value;
					this.SendPropertyChanged("AssessDesc");
					this.OnAssessDescChanged();
				}
			}
		}
		
		[Column(Storage="_AssessMaxScore", DbType="Real NOT NULL")]
		public float AssessMaxScore
		{
			get
			{
				return this._AssessMaxScore;
			}
			set
			{
				if ((this._AssessMaxScore != value))
				{
					this.OnAssessMaxScoreChanging(value);
					this.SendPropertyChanging();
					this._AssessMaxScore = value;
					this.SendPropertyChanged("AssessMaxScore");
					this.OnAssessMaxScoreChanged();
				}
			}
		}
		
		[Association(Name="Assessments_Scores", Storage="_Scores", ThisKey="AssessID", OtherKey="AssessID")]
		public EntitySet<Scores> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[Association(Name="Courses_Assessments", Storage="_Courses", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public Courses Courses
		{
			get
			{
				return this._Courses.Entity;
			}
			set
			{
				Courses previousValue = this._Courses.Entity;
				if (((previousValue != value) 
							|| (this._Courses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Courses.Entity = null;
						previousValue.Assessments.Remove(this);
					}
					this._Courses.Entity = value;
					if ((value != null))
					{
						value.Assessments.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("Courses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Scores(Scores entity)
		{
			this.SendPropertyChanging();
			entity.Assessments = this;
		}
		
		private void detach_Scores(Scores entity)
		{
			this.SendPropertyChanging();
			entity.Assessments = null;
		}
	}
	
	[Table()]
	public partial class Courses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseID;
		
		private string _CourseCode;
		
		private string _CourseSection;
		
		private string _CourseTitle;
		
		private string _CourseDesc;
		
		private EntitySet<Registers> _Registers;
		
		private EntitySet<Assessments> _Assessments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnCourseCodeChanging(string value);
    partial void OnCourseCodeChanged();
    partial void OnCourseSectionChanging(string value);
    partial void OnCourseSectionChanged();
    partial void OnCourseTitleChanging(string value);
    partial void OnCourseTitleChanged();
    partial void OnCourseDescChanging(string value);
    partial void OnCourseDescChanged();
    #endregion
		
		public Courses()
		{
			this._Registers = new EntitySet<Registers>(new Action<Registers>(this.attach_Registers), new Action<Registers>(this.detach_Registers));
			this._Assessments = new EntitySet<Assessments>(new Action<Assessments>(this.attach_Assessments), new Action<Assessments>(this.detach_Assessments));
			OnCreated();
		}
		
		[Column(Storage="_CourseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[Column(Storage="_CourseCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string CourseCode
		{
			get
			{
				return this._CourseCode;
			}
			set
			{
				if ((this._CourseCode != value))
				{
					this.OnCourseCodeChanging(value);
					this.SendPropertyChanging();
					this._CourseCode = value;
					this.SendPropertyChanged("CourseCode");
					this.OnCourseCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CourseSection", DbType="NVarChar(20)")]
		public string CourseSection
		{
			get
			{
				return this._CourseSection;
			}
			set
			{
				if ((this._CourseSection != value))
				{
					this.OnCourseSectionChanging(value);
					this.SendPropertyChanging();
					this._CourseSection = value;
					this.SendPropertyChanged("CourseSection");
					this.OnCourseSectionChanged();
				}
			}
		}
		
		[Column(Storage="_CourseTitle", DbType="NVarChar(100)")]
		public string CourseTitle
		{
			get
			{
				return this._CourseTitle;
			}
			set
			{
				if ((this._CourseTitle != value))
				{
					this.OnCourseTitleChanging(value);
					this.SendPropertyChanging();
					this._CourseTitle = value;
					this.SendPropertyChanged("CourseTitle");
					this.OnCourseTitleChanged();
				}
			}
		}
		
		[Column(Storage="_CourseDesc", DbType="NVarChar(500)")]
		public string CourseDesc
		{
			get
			{
				return this._CourseDesc;
			}
			set
			{
				if ((this._CourseDesc != value))
				{
					this.OnCourseDescChanging(value);
					this.SendPropertyChanging();
					this._CourseDesc = value;
					this.SendPropertyChanged("CourseDesc");
					this.OnCourseDescChanged();
				}
			}
		}
		
		[Association(Name="Courses_Registers", Storage="_Registers", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<Registers> Registers
		{
			get
			{
				return this._Registers;
			}
			set
			{
				this._Registers.Assign(value);
			}
		}
		
		[Association(Name="Courses_Assessments", Storage="_Assessments", ThisKey="CourseID", OtherKey="CourseID")]
		public EntitySet<Assessments> Assessments
		{
			get
			{
				return this._Assessments;
			}
			set
			{
				this._Assessments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registers(Registers entity)
		{
			this.SendPropertyChanging();
			entity.Courses = this;
		}
		
		private void detach_Registers(Registers entity)
		{
			this.SendPropertyChanging();
			entity.Courses = null;
		}
		
		private void attach_Assessments(Assessments entity)
		{
			this.SendPropertyChanging();
			entity.Courses = this;
		}
		
		private void detach_Assessments(Assessments entity)
		{
			this.SendPropertyChanging();
			entity.Courses = null;
		}
	}
	
	[Table()]
	public partial class Registers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegisterID;
		
		private int _CourseID;
		
		private int _StudentID;
		
		private EntityRef<Courses> _Courses;
		
		private EntityRef<Students> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegisterIDChanging(int value);
    partial void OnRegisterIDChanged();
    partial void OnCourseIDChanging(int value);
    partial void OnCourseIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    #endregion
		
		public Registers()
		{
			this._Courses = default(EntityRef<Courses>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[Column(Storage="_RegisterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegisterID
		{
			get
			{
				return this._RegisterID;
			}
			set
			{
				if ((this._RegisterID != value))
				{
					this.OnRegisterIDChanging(value);
					this.SendPropertyChanging();
					this._RegisterID = value;
					this.SendPropertyChanged("RegisterID");
					this.OnRegisterIDChanged();
				}
			}
		}
		
		[Column(Storage="_CourseID", DbType="Int NOT NULL")]
		public int CourseID
		{
			get
			{
				return this._CourseID;
			}
			set
			{
				if ((this._CourseID != value))
				{
					if (this._Courses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIDChanging(value);
					this.SendPropertyChanging();
					this._CourseID = value;
					this.SendPropertyChanged("CourseID");
					this.OnCourseIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[Association(Name="Courses_Registers", Storage="_Courses", ThisKey="CourseID", OtherKey="CourseID", IsForeignKey=true)]
		public Courses Courses
		{
			get
			{
				return this._Courses.Entity;
			}
			set
			{
				Courses previousValue = this._Courses.Entity;
				if (((previousValue != value) 
							|| (this._Courses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Courses.Entity = null;
						previousValue.Registers.Remove(this);
					}
					this._Courses.Entity = value;
					if ((value != null))
					{
						value.Registers.Add(this);
						this._CourseID = value.CourseID;
					}
					else
					{
						this._CourseID = default(int);
					}
					this.SendPropertyChanged("Courses");
				}
			}
		}
		
		[Association(Name="Students_Registers", Storage="_Students", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Registers.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Registers.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Scores : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScoreID;
		
		private int _AssessID;
		
		private int _StudentID;
		
		private System.Nullable<float> _Score;
		
		private EntityRef<Students> _Students;
		
		private EntityRef<Assessments> _Assessments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoreIDChanging(int value);
    partial void OnScoreIDChanged();
    partial void OnAssessIDChanging(int value);
    partial void OnAssessIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnScoreChanging(System.Nullable<float> value);
    partial void OnScoreChanged();
    #endregion
		
		public Scores()
		{
			this._Students = default(EntityRef<Students>);
			this._Assessments = default(EntityRef<Assessments>);
			OnCreated();
		}
		
		[Column(Storage="_ScoreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScoreID
		{
			get
			{
				return this._ScoreID;
			}
			set
			{
				if ((this._ScoreID != value))
				{
					this.OnScoreIDChanging(value);
					this.SendPropertyChanging();
					this._ScoreID = value;
					this.SendPropertyChanged("ScoreID");
					this.OnScoreIDChanged();
				}
			}
		}
		
		[Column(Storage="_AssessID", DbType="Int NOT NULL")]
		public int AssessID
		{
			get
			{
				return this._AssessID;
			}
			set
			{
				if ((this._AssessID != value))
				{
					if (this._Assessments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessIDChanging(value);
					this.SendPropertyChanging();
					this._AssessID = value;
					this.SendPropertyChanged("AssessID");
					this.OnAssessIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Score", DbType="Real")]
		public System.Nullable<float> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[Association(Name="Students_Scores", Storage="_Students", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		[Association(Name="Assessments_Scores", Storage="_Assessments", ThisKey="AssessID", OtherKey="AssessID", IsForeignKey=true)]
		public Assessments Assessments
		{
			get
			{
				return this._Assessments.Entity;
			}
			set
			{
				Assessments previousValue = this._Assessments.Entity;
				if (((previousValue != value) 
							|| (this._Assessments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assessments.Entity = null;
						previousValue.Scores.Remove(this);
					}
					this._Assessments.Entity = value;
					if ((value != null))
					{
						value.Scores.Add(this);
						this._AssessID = value.AssessID;
					}
					else
					{
						this._AssessID = default(int);
					}
					this.SendPropertyChanged("Assessments");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class StudentGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _GroupTitle;
		
		private string _GroupDesc;
		
		private EntitySet<Students> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnGroupTitleChanging(string value);
    partial void OnGroupTitleChanged();
    partial void OnGroupDescChanging(string value);
    partial void OnGroupDescChanged();
    #endregion
		
		public StudentGroup()
		{
			this._Students = new EntitySet<Students>(new Action<Students>(this.attach_Students), new Action<Students>(this.detach_Students));
			OnCreated();
		}
		
		[Column(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string GroupTitle
		{
			get
			{
				return this._GroupTitle;
			}
			set
			{
				if ((this._GroupTitle != value))
				{
					this.OnGroupTitleChanging(value);
					this.SendPropertyChanging();
					this._GroupTitle = value;
					this.SendPropertyChanged("GroupTitle");
					this.OnGroupTitleChanged();
				}
			}
		}
		
		[Column(Storage="_GroupDesc", DbType="NVarChar(500)")]
		public string GroupDesc
		{
			get
			{
				return this._GroupDesc;
			}
			set
			{
				if ((this._GroupDesc != value))
				{
					this.OnGroupDescChanging(value);
					this.SendPropertyChanging();
					this._GroupDesc = value;
					this.SendPropertyChanged("GroupDesc");
					this.OnGroupDescChanged();
				}
			}
		}
		
		[Association(Name="StudentGroup_Students", Storage="_Students", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<Students> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroup = this;
		}
		
		private void detach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroup = null;
		}
	}
	
	[Table()]
	public partial class Students : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private int _GroupID;
		
		private string _StudentCode;
		
		private string _StudentFirstName;
		
		private string _StudentLastName;
		
		private EntitySet<Registers> _Registers;
		
		private EntitySet<Scores> _Scores;
		
		private EntityRef<StudentGroup> _StudentGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnStudentCodeChanging(string value);
    partial void OnStudentCodeChanged();
    partial void OnStudentFirstNameChanging(string value);
    partial void OnStudentFirstNameChanged();
    partial void OnStudentLastNameChanging(string value);
    partial void OnStudentLastNameChanged();
    #endregion
		
		public Students()
		{
			this._Registers = new EntitySet<Registers>(new Action<Registers>(this.attach_Registers), new Action<Registers>(this.detach_Registers));
			this._Scores = new EntitySet<Scores>(new Action<Scores>(this.attach_Scores), new Action<Scores>(this.detach_Scores));
			this._StudentGroup = default(EntityRef<StudentGroup>);
			OnCreated();
		}
		
		[Column(Storage="_StudentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[Column(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._StudentGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[Column(Storage="_StudentCode", DbType="NVarChar(20)")]
		public string StudentCode
		{
			get
			{
				return this._StudentCode;
			}
			set
			{
				if ((this._StudentCode != value))
				{
					this.OnStudentCodeChanging(value);
					this.SendPropertyChanging();
					this._StudentCode = value;
					this.SendPropertyChanged("StudentCode");
					this.OnStudentCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StudentFirstName", DbType="NVarChar(100)")]
		public string StudentFirstName
		{
			get
			{
				return this._StudentFirstName;
			}
			set
			{
				if ((this._StudentFirstName != value))
				{
					this.OnStudentFirstNameChanging(value);
					this.SendPropertyChanging();
					this._StudentFirstName = value;
					this.SendPropertyChanged("StudentFirstName");
					this.OnStudentFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_StudentLastName", DbType="NVarChar(100)")]
		public string StudentLastName
		{
			get
			{
				return this._StudentLastName;
			}
			set
			{
				if ((this._StudentLastName != value))
				{
					this.OnStudentLastNameChanging(value);
					this.SendPropertyChanging();
					this._StudentLastName = value;
					this.SendPropertyChanged("StudentLastName");
					this.OnStudentLastNameChanged();
				}
			}
		}
		
		[Association(Name="Students_Registers", Storage="_Registers", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<Registers> Registers
		{
			get
			{
				return this._Registers;
			}
			set
			{
				this._Registers.Assign(value);
			}
		}
		
		[Association(Name="Students_Scores", Storage="_Scores", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<Scores> Scores
		{
			get
			{
				return this._Scores;
			}
			set
			{
				this._Scores.Assign(value);
			}
		}
		
		[Association(Name="StudentGroup_Students", Storage="_StudentGroup", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public StudentGroup StudentGroup
		{
			get
			{
				return this._StudentGroup.Entity;
			}
			set
			{
				StudentGroup previousValue = this._StudentGroup.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroup.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._StudentGroup.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("StudentGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registers(Registers entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Registers(Registers entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_Scores(Scores entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_Scores(Scores entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
	}
}
#pragma warning restore 1591
